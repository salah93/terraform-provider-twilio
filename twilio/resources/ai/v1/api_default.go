/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Ai
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapi

import (
    "context"
    "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
    "github.com/twilio/terraform-provider-twilio/client"
    . "github.com/twilio/terraform-provider-twilio/core"
    . "github.com/twilio/twilio-go/rest/ai/v1"
)

func ResourceServices() *schema.Resource {
    return &schema.Resource{
        CreateContext: createServices,
        ReadContext: readServices,
        UpdateContext: updateServices,
        DeleteContext: deleteServices,
        Schema: map[string]*schema.Schema{
            "unique_name": AsString(SchemaRequired),
            "auto_transcribe": AsBool(SchemaComputedOptional),
            "data_logging": AsBool(SchemaComputedOptional),
            "environment": AsString(SchemaComputedOptional),
            "friendly_name": AsString(SchemaComputedOptional),
            "language_locale": AsString(SchemaComputedOptional),
            "word_alternates": AsBool(SchemaComputedOptional),
            "auto_redaction": AsBool(SchemaComputedOptional),
            "media_redaction": AsBool(SchemaComputedOptional),
            "sid": AsString(SchemaComputed),
            "default_custom_model_sid": AsString(SchemaComputedOptional),
        },
        Importer: &schema.ResourceImporter{
            StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
                err := parseServicesImportId(d.Id(), d)
                if err != nil {
                    return nil, err
                }

                return []*schema.ResourceData{d}, nil
            },
        },
    }
}

func createServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
    params := CreateServiceParams{}
    if err := UnmarshalSchema(&params, d); err != nil {
        return diag.FromErr(err)
    }


        r, err := m.(*client.Config).Client.AiV1.CreateService(&params)
        if err != nil {
            return diag.FromErr(err)
        }

        idParts := []string{  }
        idParts = append(idParts, (*r.Sid))
        d.SetId(strings.Join(idParts, "/"))
            d.Set("sid", *r.Sid)

            return updateServices(ctx, d, m)
}

func deleteServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

    sid := d.Get("sid").(string)

        err := m.(*client.Config).Client.AiV1.DeleteService(sid)
        if err != nil {
            return diag.FromErr(err)
        }

        d.SetId("")

        return nil
}

func readServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

    sid := d.Get("sid").(string)

        r, err := m.(*client.Config).Client.AiV1.FetchService(sid)
        if err != nil {
            return diag.FromErr(err)
        }

        err = MarshalSchema(d, r)
        if err != nil {
            return diag.FromErr(err)
        }

        return nil
}

func parseServicesImportId(importId string, d *schema.ResourceData) error {
    importParts := strings.Split(importId, "/")
    errStr := "invalid import ID (%q), expected sid"

    if len(importParts) != 1 {
        return fmt.Errorf(errStr, importId)
    }

        d.Set("sid", importParts[0])

    return nil
}
func updateServices(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
    params := UpdateServiceParams{}
    if err := UnmarshalSchema(&params, d); err != nil {
        return diag.FromErr(err)
    }

    sid := d.Get("sid").(string)

        r, err := m.(*client.Config).Client.AiV1.UpdateService(sid, &params)
        if err != nil {
            return diag.FromErr(err)
        }

        err = MarshalSchema(d, r)
        if err != nil {
            return diag.FromErr(err)
        }

        return nil
}

func ResourceServicesTranscripts() *schema.Resource {
    return &schema.Resource{
        CreateContext: createServicesTranscripts,
        ReadContext: readServicesTranscripts,
        DeleteContext: deleteServicesTranscripts,
        Schema: map[string]*schema.Schema{
            "service_sid": AsString(SchemaForceNewRequired),
            "data_logging": AsBool(SchemaForceNewOptional),
            "model_sid": AsString(SchemaForceNewOptional),
            "media_url": AsString(SchemaForceNewOptional),
            "recording_sid": AsString(SchemaForceNewOptional),
            "participants": AsString(SchemaForceNewOptional),
            "call_direction": AsString(SchemaForceNewOptional),
            "sid": AsString(SchemaComputed),
        },
        Importer: &schema.ResourceImporter{
            StateContext: func(ctx context.Context, d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
                err := parseServicesTranscriptsImportId(d.Id(), d)
                if err != nil {
                    return nil, err
                }

                return []*schema.ResourceData{d}, nil
            },
        },
    }
}

func createServicesTranscripts(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
    params := CreateTranscriptParams{}
    if err := UnmarshalSchema(&params, d); err != nil {
        return diag.FromErr(err)
    }

    serviceSid := d.Get("service_sid").(string)

        r, err := m.(*client.Config).Client.AiV1.CreateTranscript(serviceSid, &params)
        if err != nil {
            return diag.FromErr(err)
        }

        idParts := []string{ serviceSid,  }
        idParts = append(idParts, (*r.Sid))
        d.SetId(strings.Join(idParts, "/"))

            err = MarshalSchema(d, r)
            if err != nil {
                return diag.FromErr(err)
            }

            return nil
}

func deleteServicesTranscripts(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

    serviceSid := d.Get("service_sid").(string)
    sid := d.Get("sid").(string)

        err := m.(*client.Config).Client.AiV1.DeleteTranscript(serviceSid, sid)
        if err != nil {
            return diag.FromErr(err)
        }

        d.SetId("")

        return nil
}

func readServicesTranscripts(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

    serviceSid := d.Get("service_sid").(string)
    sid := d.Get("sid").(string)

        r, err := m.(*client.Config).Client.AiV1.FetchTranscript(serviceSid, sid)
        if err != nil {
            return diag.FromErr(err)
        }

        err = MarshalSchema(d, r)
        if err != nil {
            return diag.FromErr(err)
        }

        return nil
}

func parseServicesTranscriptsImportId(importId string, d *schema.ResourceData) error {
    importParts := strings.Split(importId, "/")
    errStr := "invalid import ID (%q), expected service_sid/sid"

    if len(importParts) != 2 {
        return fmt.Errorf(errStr, importId)
    }

        d.Set("service_sid", importParts[0])
        d.Set("sid", importParts[1])

    return nil
}
